{"version":3,"sources":["contextFile.ts","components/home.tsx","components/poll.tsx","components/new.tsx","components/signup.tsx","components/login.tsx","routes.tsx","App.tsx","reportWebVitals.ts","theme/theme.ts","index.tsx"],"names":["UserContext","createContext","Home","auth","useContext","useState","polls","setPolls","useEffect","a","fetch","res","json","data","user","as","size","mb","length","templateColumns","gap","map","poll","id","question","poll_count","to","background","padding","borderRadius","fontWeight","height","style","textDecoration","Poll","useParams","navigate","useNavigate","setPoll","loading","setLoading","voteSelected","setSelectedVote","showResults","setShowResults","pollResults","setPollResults","method","headers","credentials","body","JSON","stringify","userId","res2","success","fetchReq","res3","data3","textAlign","labels","parse","options","d","label","options_weight","datasets","backgroundColor","borderColor","borderWidth","indexAxis","displayChart","colorScheme","onChange","e","parseInt","handleSelect","value","option","index","onClick","optionsWeight","bodyTest","choice","pollCount","total_count","NewPoll","numOfOptions","setNumOfOptions","setQuestion","noQuestion","setNoQuestion","useForm","register","handleSubmit","errors","onSubmit","Object","values","push","submitPoll","newPoll","direction","align","w","my","placeholder","target","_placeholder","color","opacity","type","ref","required","name","justify","mx","variant","leftIcon","newArray","Signup","username","setUsername","password","setPassword","signupFailed","setSignupFailed","setAuth","userCredentials","result","replace","pos","left","Login","loginFailed","setLoginFailed","mr","ml","routes","path","element","App","maxW","paddingTop","paddingBottom","justifyContent","alignItems","src","display","lineHeight","marginRight","listStyleType","Provider","mt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","initialColorMode","useSystemColorMode","styles","global","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61b59b4e.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const UserContext = createContext<any>(null);\n","import { Box, Flex, Grid, Heading } from '@chakra-ui/react';\nimport { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { UserContext } from '../contextFile';\n\ninterface HomeProps {\n\n}\n\ninterface IPoll {\n    id: number;\n    question: string;\n    poll_count: number;\n}\n\nconst Home: FunctionComponent<HomeProps> = () => {\n\n    const { auth } = useContext(UserContext);\n    const [polls, setPolls] = useState<IPoll[]>([]);\n\n    useEffect(() => {\n        (async () => {\n            const res = await fetch('https://tva-backend.herokuapp.com/polls');\n            const data = await res.json();\n            setPolls(data);\n        })();\n    }, []);\n\n    const displayPolls = () => {\n        return polls.map(poll => {\n            const { id, question, poll_count } = poll;\n\n            return (\n                <Link to={`/poll/${id}`}>\n                    <Box\n                        background=\"#f2f9e3\"\n                        padding={3}\n                        borderRadius={5}\n                        fontWeight=\"bold\"\n                    >\n                        <p>{question}</p>\n                        <p>{poll_count}</p>\n                    </Box>\n                </Link>\n            )\n        })\n    }\n\n    return (\n        <>\n            {auth.user ? (\n                <Box>\n                    <Heading as=\"h2\" size=\"large\" mb={5}>Welcome {auth.user}</Heading>\n                    <Box>\n                        {polls.length ?\n                            <Grid\n                                templateColumns=\"repeat(auto-fill, minmax(300px, 1fr))\"\n                                gap=\"5\"\n                            >\n                                {displayPolls()}\n                            </Grid>\n                            :\n                            <Flex height=\"65vh\">\n                                <Heading as=\"h2\" size=\"large\">No polls</Heading>\n                            </Flex>\n                        }\n                    </Box>\n                </Box>\n            ) : (\n                <Box>\n                    <Heading as=\"h2\" size=\"large\">You must be logged in. Please <Link style={{ textDecoration: 'underline' }} to=\"/login\">Log in</Link>.</Heading>\n                </Box>\n            )}\n        </>\n    );\n}\n\nexport default Home;","import {\n  Box,\n  Button,\n  Heading,\n  Radio,\n  RadioGroup,\n  Stack,\n} from \"@chakra-ui/react\";\nimport { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { UserContext } from \"../contextFile\";\nimport { Bar } from 'react-chartjs-2';\n\ninterface PollProps { }\n\nexport interface IPoll {\n  id: number;\n  options: string;\n  options_weight: any;\n  question: string;\n  total_count: number;\n}\n\nconst Poll: FunctionComponent<PollProps> = () => {\n  const { auth } = useContext(UserContext);\n  let { id } = useParams();\n  let navigate = useNavigate();\n  const [poll, setPoll] = useState<IPoll>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [voteSelected, setSelectedVote] = useState<number>();\n  const [showResults, setShowResults] = useState<boolean>(false);\n  const [pollResults, setPollResults] = useState<any>();\n\n  useEffect(() => {\n    if (!auth.user) {\n      navigate(\"/login\");\n    }\n\n    (async () => {\n      const res = await fetch(`https://tva-backend.herokuapp.com/poll/${id}`);\n      const res2 = await fetch(`https://tva-backend.herokuapp.com/poll/${id}/voted`, {\n      method: 'POST',  \n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: 'include',\n        body: JSON.stringify({ userId: auth.userId })\n      });\n\n      const data = await res.json();\n      const data2 = await res2.json();\n      if (data2.success) {\n        setShowResults(true);\n      }\n\n      if (data)\n        setPoll(data[0]);\n      setLoading(false);\n    })();\n  }, []);\n\n  useEffect(() => {\n    const fetchReq = async () => {\n      const res3 = await fetch(`https://tva-backend.herokuapp.com/poll/${id}/results`, {\n        credentials: 'include'\n      });\n      const data3 = await res3.json();\n      setPollResults(data3);\n    }\n\n    fetchReq();\n  }, [showResults, setShowResults])\n\n  const handleSelect = (e: string) => {\n    setSelectedVote(parseInt(e));\n  };\n\n  const handleSubmit = () => {\n    (async () => {\n      if (poll) {\n        const optionsWeight = JSON.parse(poll.options_weight);\n\n        const bodyTest = {\n          choice: voteSelected,\n          pollCount: poll?.total_count,\n          optionsWeight,\n        };\n\n        await fetch(\n          `https://tva-backend.herokuapp.com/poll/${id}/submit`,\n          {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify(bodyTest),\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n        await fetch(\n          `https://tva-backend.herokuapp.com/poll/${id}/submit-user`,\n          {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({\n              userId: auth.userId,\n            }),\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n        setShowResults(true);\n\n      }\n    })();\n  };\n\n  const displayChart = () => {\n\n    const labels = JSON.parse(poll!.options);\n    const d = {\n      label: '# of votes',\n      data: JSON.parse(pollResults[0].options_weight)\n    }\n\n    const options = {\n      indexAxis: \"y\"\n      // Elements options apply to all of the options unless overridden in a dataset\n      // In this case, we are setting the border of each horizontal bar to be 2px wide\n    };\n\n    const data = {\n      labels,\n      datasets: [\n        {\n          ...d,\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.2)',\n            'rgba(54, 162, 235, 0.2)',\n            'rgba(255, 206, 86, 0.2)',\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(153, 102, 255, 0.2)',\n            'rgba(255, 159, 64, 0.2)',\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)',\n            'rgba(255, 159, 64, 1)',\n          ],\n          borderWidth: 1,\n        },\n      ],\n    };\n    // @ts-ignore: Unreachable code error\n    return <Bar data={data} options={options} />\n  }\n\n  return (\n    <>\n      {loading ? (\n        \"\"\n      ) : (\n        <Box>\n          <Heading as=\"h2\" size=\"3xl\" mb={10} textAlign=\"center\">\n            {poll!.question}\n          </Heading>\n          {showResults ? (\n            <>\n              <Box\n                mb={10}\n                background=\"#b7d2d9\"\n                padding=\"71px\"\n                borderRadius=\"10px\"\n              >\n                {displayChart()}\n              </Box>\n              <Box textAlign=\"right\">\n                <Link to=\"/\"><Button colorScheme=\"yellow\">Back</Button></Link>\n              </Box>\n            </>\n          ) : (\n            <>\n              <RadioGroup onChange={(e) => handleSelect(e)} value={voteSelected} mb={10}>\n                <Stack>\n                  {JSON.parse(poll!.options).map(\n                    (option: string, index: string) => {\n                      return (\n                        <Radio size=\"lg\" colorScheme=\"yellow\" value={index}>\n                          {option}\n                        </Radio>\n                      );\n                    }\n                  )}\n                </Stack>\n              </RadioGroup>\n              <Button onClick={handleSubmit} colorScheme=\"yellow\">\n                Vote\n              </Button>\n            </>\n          )}\n        </Box>\n      )\n      }\n    </>\n  );\n};\n\nexport default Poll;\n","import { Flex, Heading, Input, Textarea, Button, Text } from \"@chakra-ui/react\";\nimport { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { UserContext } from \"../contextFile\";\nimport { BiPlus } from \"react-icons/bi\";\nimport { useForm } from \"react-hook-form\";\n\ninterface NewPollProps {}\n\nconst NewPoll: FunctionComponent<NewPollProps> = () => {\n  const { auth } = useContext(UserContext);\n  let navigate = useNavigate();\n  const [numOfOptions, setNumOfOptions] = useState([\"option\", \"option\"]);\n  const [question, setQuestion] = useState(\"\");\n  const [noQuestion, setNoQuestion] = useState(false);\n\n  useEffect(() => {\n    if (!auth.user) {\n      navigate(\"/login\");\n    }\n  });\n\n  const { register, handleSubmit, errors } = useForm<any>();\n\n  function handleQuestion(e: any) {\n    setQuestion(e.target.value);\n  }\n\n  function addOption() {\n    const newArray = [...numOfOptions, \"option\"];\n    setNumOfOptions(newArray);\n  }\n\n  const onSubmit = handleSubmit((data) => {\n    let options = [];\n\n    for (const option of Object.values(data)) {\n      options.push(option);\n    }\n\n    if (question.length === 0) {\n      setNoQuestion(true);\n    } else {\n      setNoQuestion(false);\n      submitPoll(question, options);\n    }\n  });\n\n  async function submitPoll(question: any, options: any) {\n    const newPoll = {\n      question,\n      options,\n    };\n\n    await fetch(\n      \"https://tva-backend.herokuapp.com/poll/create\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(newPoll),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    navigate(\"/\");\n  }\n\n  return (\n    <Flex direction=\"column\" align=\"center\">\n      <Heading as=\"h2\" size=\"large\">\n        Create a new poll\n      </Heading>\n      <Flex direction=\"column\" w=\"30rem\">\n        <Textarea\n          my=\"1rem\"\n          placeholder=\"Write your question here\"\n          onChange={handleQuestion}\n          background=\"white\"\n          _placeholder={{ color: \"black\", opacity: \"50%\" }}\n        />\n        {noQuestion && <Text color=\"red\">You need a Question</Text>}\n        <form onSubmit={onSubmit}>\n          {numOfOptions.map((option, index) => {\n            return (\n              <Input\n                my=\"1rem\"\n                placeholder={`Option ${index + 1}`}\n                type=\"text\"\n                ref={register({ required: true })}\n                name={`option ${index + 1} `}\n                background=\"white\"\n                _placeholder={{ color: \"black\", opacity: \"50%\" }}\n              />\n            );\n          })}\n          {errors.option && <Text> hallo</Text>}\n          <Flex justify=\"center\" my=\"1rem\">\n            <Button\n              mx=\"1rem\"\n              variant=\"ghost\"\n              leftIcon={<BiPlus />}\n              onClick={addOption}\n            >\n              Add an option\n            </Button>\n            <Button mx=\"1rem\" type=\"submit\" colorScheme=\"facebook\">\n              Submit\n            </Button>\n          </Flex>\n        </form>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default NewPoll;\n","import { useState, useContext } from \"react\";\nimport { Flex, Heading, Input, Button, Text } from \"@chakra-ui/react\";\nimport { FunctionComponent } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { UserContext } from \"../contextFile\";\n\ninterface SignupProps {}\n\nconst Signup: FunctionComponent<SignupProps> = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [signupFailed, setSignupFailed] = useState(false);\n\n  const { setAuth } = useContext(UserContext);\n  let navigate = useNavigate();\n\n  function handleUsername(e: any) {\n    setUsername(e.target.value);\n  }\n  function handlePassword(e: any) {\n    setPassword(e.target.value);\n  }\n\n  async function submitPassword() {\n    if (username.length > 0 && password.length > 0) {\n      const userCredentials = {\n        username,\n        password,\n      };\n\n      const result = await fetch(\"https://tva-backend.herokuapp.com/signup\", {\n        method: \"POST\",\n        body: JSON.stringify(userCredentials),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n      });\n      const data = await result.json();\n\n      if (data.success) {\n        setAuth({ user: userCredentials.username });\n        navigate(\"/login\", { replace: true });\n      } else {\n        setSignupFailed(true);\n      }\n    } else {\n      setSignupFailed(true);\n    }\n  }\n\n  return (\n    <Flex w=\"100%\" direction=\"column\" align=\"center\">\n      <Heading as=\"h2\" size=\"large\">\n        Signup\n      </Heading>\n\n      <Flex w=\"50%\" direction=\"column\" align=\"center\" pos=\"relative\">\n        <Input\n          my=\"1rem\"\n          placeholder=\"Username\"\n          size=\"lg\"\n          onChange={handleUsername}\n          background=\"white\"\n          required\n          _placeholder={{ color: \"black\", opacity: \"50%\" }}\n        />\n        <Input\n          my=\"1rem\"\n          placeholder=\"Password\"\n          size=\"lg\"\n          type=\"password\"\n          background=\"white\"\n          onChange={handlePassword}\n          _placeholder={{ color: \"black\", opacity: \"50%\" }}\n        />\n        <Flex align=\"center\">\n          <Text pos=\"absolute\" left=\"0\">\n            <Link to=\"/login\">Go back to Login</Link>\n          </Text>\n          <Button my=\"1rem\" w=\"8rem\" type=\"submit\" onClick={submitPassword}>\n            signup\n          </Button>\n        </Flex>\n        {signupFailed && <Text>Signup Failed</Text>}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Signup;\n","import { Flex, Heading, Input, Button, Text } from \"@chakra-ui/react\";\nimport { FunctionComponent, useState, useContext } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { UserContext } from \"../contextFile\";\n\ninterface LoginProps {}\n\nconst Login: FunctionComponent<LoginProps> = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loginFailed, setLoginFailed] = useState(false);\n\n  const { setAuth } = useContext(UserContext);\n  let navigate = useNavigate();\n\n  function handleUsername(e: any) {\n    setUsername(e.target.value);\n  }\n  function handlePassword(e: any) {\n    setPassword(e.target.value);\n  }\n\n  async function submitPassword() {\n    const userCredentials = {\n      username,\n      password,\n    };\n\n    const result = await fetch(\"https://tva-backend.herokuapp.com/login\", {\n      method: \"POST\",\n      body: JSON.stringify(userCredentials),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"include\",\n    });\n    const data = await result.json();\n\n    if (data.success) {\n      setAuth({ user: userCredentials.username, userId: data.userId });\n      navigate(\"/\", { replace: true });\n    } else {\n      setLoginFailed(true);\n    }\n  }\n\n  return (\n    <Flex w=\"100%\" direction=\"column\" align=\"center\">\n      <Heading as=\"h2\" size=\"large\">\n        Login\n      </Heading>\n\n      <Flex w=\"50%\" direction=\"column\" align=\"center\">\n        <Input\n          my=\"1rem\"\n          placeholder=\"Username\"\n          size=\"lg\"\n          onChange={handleUsername}\n          background=\"white\"\n          _placeholder={{ color: \"black\", opacity: \"50%\" }}\n        />\n        <Input\n          my=\"1rem\"\n          placeholder=\"Password\"\n          size=\"lg\"\n          type=\"password\"\n          onChange={handlePassword}\n          background=\"white\"\n          _placeholder={{ color: \"black\", opacity: \"50%\" }}\n        />\n        <Flex align=\"center\">\n          <Button\n            my=\"1rem\"\n            mr=\"1rem\"\n            w=\"50%\"\n            type=\"submit\"\n            colorScheme=\"whiteAlpha\"\n            onClick={submitPassword}\n          >\n            Log In\n          </Button>\n          <Text>or</Text>\n          <Button ml=\"1rem\" colorScheme=\"facebook\">\n            <Link to=\"/signup\">signup</Link>\n          </Button>\n        </Flex>\n        {loginFailed && <Text>Login Failed</Text>}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Login;\n","import { Routes, Route } from \"react-router-dom\";\nimport Home from \"./components/home\";\nimport Poll from \"./components/poll\";\nimport NewPoll from \"./components/new\";\nimport Signup from \"./components/signup\";\nimport Login from \"./components/login\";\n\nconst routes = (\n  <Routes>\n    <Route path=\"/\" element={<Home />} />\n    <Route path=\"/poll/:id\" element={<Poll />} />\n    <Route path=\"/new\" element={<NewPoll />} />\n    <Route path=\"/signup\" element={<Signup />} />\n    <Route path=\"/login\" element={<Login />} />\n  </Routes>\n);\n\nexport default routes;\n","import { useState, useEffect } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  Container,\n  Flex,\n  Image,\n  ListItem,\n  UnorderedList,\n  Text,\n} from \"@chakra-ui/react\";\nimport routes from \"./routes\";\nimport { UserContext } from \"./contextFile\";\n\nfunction App() {\n  const [auth, setAuth] = useState({ user: null });\n  let navigate = useNavigate();\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    // /auth route will return the authenticated user's name\n    (async () => {\n      const res = await fetch(\"https://tva-backend.herokuapp.com/auth\", {\n        credentials: \"include\",\n      });\n      const user = await res.json();\n      setAuth(user);\n      setLoading(false);\n    })();\n  }, []);\n\n  const handleSignout = () => {\n    (async () => {\n      await fetch(\"https://tva-backend.herokuapp.com/signout\", {\n        credentials: \"include\",\n        method: \"POST\",\n        body: JSON.stringify({}),\n      });\n      setAuth({ user: null });\n    })();\n    navigate(\"/\");\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Box></Box>\n      ) : (\n        <Container maxW=\"container.xl\">\n          <Box paddingTop={5} paddingBottom={5}>\n            <Flex\n              justifyContent=\"space-between\"\n              background=\"#7b8e93\"\n              padding=\"10px 20px\"\n              borderRadius=\"10px\"\n              alignItems=\"center\"\n            >\n              <Flex align=\"center\">\n                <Link to={\"/\"} style={{ fontWeight: \"bold\" }}>\n                  <Image\n                    src=\"https://emojis.slackmojis.com/emojis/images/1534453840/4524/zlatan_ibrahimovic.png?1534453840\"\n                    display=\"inline-block\"\n                    height={10}\n                  />\n                  Zultan's Voting App\n                </Link>\n              </Flex>\n              <Flex alignItems=\"center\">\n                <Text display=\"inline-block\" fontWeight=\"bold\" mr=\"1rem\" lineHeight=\"1\">\n                  <Link to={\"/\"}>Home</Link>\n                </Text>\n                {auth.user ? (\n                  <>\n                    <Link to=\"/new\" style={{ marginRight: 10 }}>\n                      <Button colorScheme=\"linkedin\" size=\"xs\">\n                        new poll\n                      </Button>\n                    </Link>\n                    <Button\n                      size=\"xs\"\n                      colorScheme=\"whatsapp\"\n                      onClick={handleSignout}\n                    >\n                      sign out\n                    </Button>\n                  </>\n                ) : (\n                  <UnorderedList>\n                    <ListItem mr={4} listStyleType=\"none\" display=\"inline\">\n                      <Link to=\"/login\">\n                        <Button size=\"xs\" colorScheme=\"whatsapp\">\n                          login\n                        </Button>\n                      </Link>\n                    </ListItem>\n                    <ListItem listStyleType=\"none\" display=\"inline\">\n                      <Link to=\"/signup\">\n                        <Button colorScheme=\"linkedin\" size=\"xs\">\n                          sign up\n                        </Button>\n                      </Link>\n                    </ListItem>\n                  </UnorderedList>\n                )}\n              </Flex>\n            </Flex>\n          </Box>\n          <UserContext.Provider value={{ auth, setAuth }}>\n            <Box mt={100}>{routes}</Box>\n          </UserContext.Provider>\n        </Container>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({\n    initialColorMode: \"dark\",\n    useSystemColorMode: false,\n    styles: {\n        global: {\n            body: {\n                background:\"#93a4a8\",\n                color: '#322727'\n\n            }\n        }\n    }\n})\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport theme from './theme/theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n    </HashRouter>,\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}